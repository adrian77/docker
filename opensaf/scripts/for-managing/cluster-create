#!/bin/bash
[[ -z $1 ]] && echo Specify number of controllers && exit 1
[[ -z $2 ]] && echo Specify number of payloads && exit 1

# Default image to instansiate containers from
image=adrianszwej/opensaf:4.6-ubuntu-14
cmd="/etc/init.d/opensafd start"

[[ ! -z $3 ]] && image=$3 
clustername=default

[[ ! -z $4 ]] && clustername=$4 

SCs=$1
PLs=$2
# If TIPC address should be set outside the container
tipc_manage=no

[[ -z $OFFSET ]] && OFFSET=0
[[ -z $STORAGE ]] && STORAGE=~/sharedfs
SFS=$STORAGE/$clustername
mkdir -p $SFS > /dev/null

# To be removed for final version
cp ../for-running/etc/container.env $SFS
cp ../for-running/home/opensaf/setup-opensaf-node $SFS

mkdir -p /var/run/netns > /dev/null
__check_tipc_module()
{
   lsmod | grep tipc > /dev/null || (echo "TIPC module is not loaded" && exit 1)
}

[[ -z $TIPC ]] && TIPC=yes && __check_tipc_module
C_OPTS="--env TIPC=$TIPC"

__create_tipc_namespace()
{
   local pid=$1
   local nodeid=$2
   ln -s /proc/$pid/ns/net /var/run/netns/$pid
   ../../../bin/for-docker/tipc-namespace-setup $pid $nodeid $tipc_manage
}

__create_container()
{
    echo "Creating container $name"

    docker run --privileged -t -d -i --name $1 -h $2 $C_OPTS -v $SFS:/etc/opensaf/sharedfs -v $SFS/container.env:/etc/container.env -v $SFS/setup-opensaf-node:/home/opensaf/setup-opensaf-node $image
   
    if [ "$TIPC" = "yes" ]; then
       PID=`docker inspect -f '{{.State.Pid}}' $1`
       __create_tipc_namespace $PID ${2/*-}
    fi
}

__create_scs()
{
	i=0
	while [ $i -lt $SCs ]; do
	   i=$(($i + 1))
	   node=SC-$i 
	   name=$clustername-SC-$i
	   docker inspect $name > /dev/null 2>&1
	   if [ $? -ne 0 ]; then 
	     __create_container $name $node
             #sleep 1  
             docker exec $name $cmd
	   fi
	done
}

__create_pls()
{
	i=$((2 + OFFSET))
	while [ $i -lt $((PLs + OFFSET + 2)) ]; do
	   i=$(($i + 1))
	   node=PL-$i             
	   name=$clustername-PL-$i
	   docker inspect $name > /dev/null 2>&1
	   if [ $? -ne 0 ]; then
	     __create_container $name $node
             #sleep 1 
             docker exec $name $cmd
	   fi
	done
}

__create_scs 
__create_pls

exit 0
